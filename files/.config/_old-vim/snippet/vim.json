{
    "doc": {
        "prefix": "doc",
        "description": "Function doc",
        "body": [
            "\"\"",
            "\" ${1:description}",
            "\" {required} argument",
            "\" [optional] argument"
        ]
    },
    "TODO": {
        "prefix": "todo",
        "description": "\" TODO: ...",
        "body": "\" TODO: ${0:task}"
    },
    "guard": {
        "prefix": "guard",
        "description": "guard script reload guard",
        "body": [
            "if exists('g:loaded_${VIM:expand('%:r')}_plugin')",
            "    finish",
            "endif",
            "let g:loaded_${VIM:expand('%:r')}_plugin = 1",
            "\n$0"
        ]
    },
    "fun": {
        "prefix": "fun",
        "description": "fun! ...",
        "body": [
            "fun! ${VIM:expand('%:p') =~ 'autoload' ? substitute(matchstr(expand('%:p'),'autoload/\\zs.*\\ze.vim'),'[/]','#','g').'#' : ''}${2:function_name}(${3})",
            "    ${0}",
            "endf"
        ]
    },
    "try": {
        "prefix": "try",
        "description": "t try ... catch statement",
        "body": [
            "try",
            "    ${1:${TM_SELECTED_TEXT}}",
            "catch ${2}",
            "    ${0}",
            "endtry"
        ]
    },
    "for": {
        "prefix": "for",
        "description": "for for ... in loop",
        "body": [
            "for ${1} in ${2}",
            "    ${0:${TM_SELECTED_TEXT}}",
            "endfor"
        ]
    },
    "forkv": {
        "prefix": "forkv",
        "description": "forkv for [key, value] in loop",
        "body": [
            "for [${1},${2}] in items(${3})",
            "    ${0}",
            "    unlet $1 $2",
            "endfor"
        ]
    },
    "wh": {
        "prefix": "wh",
        "description": "wh while loop",
        "body": [
            "while ${1}",
            "    ${0:${TM_SELECTED_TEXT}}",
            "endw"
        ]
    },
    "if": {
        "prefix": "if",
        "description": "if if statement",
        "body": [
            "if ${1}",
            "    ${0:${TM_SELECTED_TEXT}}",
            "endif"
        ]
    },
    "ife": {
        "prefix": "ife",
        "description": "ife if ... else statement",
        "body": [
            "if ${1}",
            "    ${2:${TM_SELECTED_TEXT}}",
            "else",
            "    ${0}",
            "endif"
        ]
    },
    "au": {
        "prefix": "au",
        "description": "au augroup ... autocmd block",
        "body": [
            "augroup ${1:AU_NAME}",
            "    autocmd ${2:BufRead,BufNewFile} ${3:*.ext,*.ext3|<buffer[=N]>} ${0}",
            "augroup end"
        ]
    },
    "bun": {
        "prefix": "bun",
        "description": "bun Vundle.vim Plugin definition",
        "body": [
            "Plugin '${0}'"
        ]
    },
    "plug": {
        "prefix": "plug",
        "description": "plug vim-plug Plugin definition",
        "body": [
            "Plug '${0}'"
        ]
    },
    "plugdo": {
        "prefix": "plugdo",
        "description": "plugdo vim-plug Plugin definition with { 'do': '' }",
        "body": [
            "Plug '${1}', { 'do': '${0}' }"
        ]
    },
    "plugon": {
        "prefix": "plugon",
        "description": "plugon vim-plug Plugin definition with { 'on': '' }",
        "body": [
            "Plug '${1}', { 'on': '${0}' }"
        ]
    },
    "plugfor": {
        "prefix": "plugfor",
        "description": "plugfor vim-plug Plugin definition with { 'for': '' }",
        "body": [
            "Plug '${1}', { 'for': '${0}' }"
        ]
    },
    "plugbr": {
        "prefix": "plugbr",
        "description": "plugbr vim-plug Plugin definition with { 'branch': '' }",
        "body": [
            "Plug '${1}', { 'branch': '${0}' }"
        ]
    },
    "plugtag": {
        "prefix": "plugtag",
        "description": "plugtag vim-plug Plugin definition with { 'tag': '' }",
        "body": [
            "Plug '${1}', { 'tag': '${0}' }"
        ]
    },
    "let": {
        "prefix": "let",
        "description": "let",
        "body": [
            "let ${1:variable} = ${0: value}"
        ]
    },
    "se": {
        "prefix": "se",
        "description": "se",
        "body": [
            "set ${1:setting};"
        ]
    },
    "set": {
        "prefix": "set",
        "description": "set",
        "body": [
            "set ${1:setting} = ${0:value}"
        ]
    },
    "nn": {
        "prefix": "nn",
        "description": "nn",
        "body": [
            "nnoremap ${1} ${2}<CR>"
        ]
    },
    "no": {
        "prefix": "no",
        "description": "no",
        "body": [
            "noremap ${1} ${2}"
        ]
    },
    "vm": {
        "prefix": "vm",
        "description": "vm",
        "body": [
            "vmap ${1} ${2}"
        ]
    },
    "im": {
        "prefix": "im",
        "description": "im",
        "body": [
            "imap ${1} ${2}"
        ]
    },
    "exe": {
        "prefix": "exe",
        "description": "exe",
        "body": [
            "execute ${1}"
        ]
    },
    "filename": {
        "prefix": "filename",
        "description": "filename",
        "body": [
            "${VIM:Filename()}"        ]
    }
}
