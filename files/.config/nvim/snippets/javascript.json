{
  "js-import": {
    "prefix": "import",
    "body": ["import ${2:foo} from '${1:${TM_SELECTED_TEXT}}';"]
  },
  "js-export": {
    "prefix": "export",
    "body": ["export default ${0:${TM_SELECTED_TEXT}};"]
  },
  "js-module": {
    "prefix": "module",
    "body": ["module.exports = ${0:${TM_SELECTED_TEXT}};"]
  },
  "js-require": {
    "prefix": "require",
    "body": ["require('${0:${TM_SELECTED_TEXT}}');"]
  },
  "js-const": {
    "prefix": "const",
    "body": ["const ${1:var} = ${0:${TM_SELECTED_TEXT}};"]
  },
  "js-let": {
    "prefix": "let",
    "body": ["let ${1:var} = ${0:${TM_SELECTED_TEXT}};"]
  },
  "js-class": {
    "prefix": "class",
    "body": ["class ${0:${TM_SELECTED_TEXT}} {\n\t\n}"]
  },
  "js-ctor": {
    "prefix": "ctor",
    "body": ["constructor(${0:${TM_SELECTED_TEXT}}) {\n\tsuper(props);\n\t\n}"]
  },
  "js-fun": {
    "prefix": "fun",
    "body": ["function ${1:name}(${2:args}) {\n\t${0:${TM_SELECTED_TEXT}}\n}"]
  },
  "js-afun": {
    "prefix": "afun",
    "body": ["() => {\n\t${0:${TM_SELECTED_TEXT}}\n}"]
  },
  "js-cfun": {
    "prefix": "cfun",
    "body": ["const ${1:fun} = () => ${0:${TM_SELECTED_TEXT}}"]
  },
  "js-if": {
    "prefix": "if",
    "body": ["if (true) {\n\t${0:${TM_SELECTED_TEXT}}\n}"]
  },
  "js-elif": {
    "prefix": "elif",
    "body": ["else if (true) {\n\t${0:${TM_SELECTED_TEXT}}\n}"]
  },
  "js-else": {
    "prefix": "else",
    "body": ["else {\n\t${0:${TM_SELECTED_TEXT}}\n}"]
  },
  "js-switch": {
    "prefix": "switch",
    "body": [
      "switch (true) {\n\tcase '':\n\t\t${0:${TM_SELECTED_TEXT}}\n\t\tbreak;\n\tdefault:\n}"
    ]
  },
  "js-case": {
    "prefix": "case",
    "body": ["case '':\n\t${0:${TM_SELECTED_TEXT}}\n\tbreak;"]
  },
  "js-default": {
    "prefix": "default",
    "body": ["default:\n\t${0:${TM_SELECTED_TEXT}}\n\t"]
  },
  "js-try": {
    "prefix": "try",
    "body": ["try {\n\t${0:${TM_SELECTED_TEXT}}\n} catch (err) {\n\t\n}"]
  },
  "js-tryf": {
    "prefix": "tryf",
    "body": [
      "try {\n\t${0:${TM_SELECTED_TEXT}}\n} catch (err) {\n\t\n} finally {\n\t\n}"
    ]
  },
  "js-throw": {
    "prefix": "throw",
    "body": ["throw new Error('${0:${TM_SELECTED_TEXT}}');"]
  },
  "js-for": {
    "prefix": "for",
    "body": ["for ($1) {\n\t${0:${TM_SELECTED_TEXT}}\n}"]
  },
  "js-for...in": {
    "prefix": "fork",
    "body": [
      "for (let ${1:key} in ${2:object}) {\n\t${0:${TM_SELECTED_TEXT}}\n}"
    ]
  },
  "js-for...of": {
    "prefix": "forv",
    "body": ["for (let value of array) {\n\t${0:${TM_SELECTED_TEXT}}\n}"]
  },
  "js-promise": {
    "prefix": "promise",
    "body": [
      "new Promise((resolve, reject) => {\n\t${0:${TM_SELECTED_TEXT}}\n})"
    ]
  },
  "js-log": {
    "prefix": ["log", "col"],
    "body": ["console.log(${0:${TM_SELECTED_TEXT}});"]
  },
  "js-eslint": {
    "prefix": "eslint-disable",
    "body": ["// eslint-disable-next-line"]
  },
  "js-react-use-state": {
    "prefix": "use-state",
    "body": ["const [ ${1:state}, ${2:set${1}}] = useState(${0:value});"]
  },
  "js-react-use-effect": {
    "prefix": "use-effect",
    "body": ["useEffect(() => {\n\t${0}\n}, []);"]
  },
  "js-react-use-ref": {
    "prefix": "use-ref",
    "body": ["const ${0:ref} = useRef(null);"]
  },
  "js-react-use-callback": {
    "prefix": "use-callback",
    "body": ["const ${1:callback} = useCallback(() => {", "\t\t${0}", "}, []);"]
  },
  "js-react-use-memo": {
    "prefix": "use-memo",
    "body": ["const ${1:memo} = useMemo(() => {\n\t${0}\n}, []);"]
  },
  "js-react-fc": {
    "prefix": ["component"],
    "body": [
      "interface ${1:Component}Props {",
      "",
      "}",
      "",
      "export default function ${1:Component}(props: ${1:Component}Props) {",
		  "$0",
      "\treturn (",
      "",
      "\t)",
      "}"
    ]
  }
}
