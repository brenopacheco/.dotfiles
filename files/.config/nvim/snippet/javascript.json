{
    "js-import":      { "prefix": "imp",     "body": [ "import ${1:*} from '${2:...}'"]},
    "js-export":      { "prefix": "exp",     "body": [ "export default ${1};"]},
    "js-module":      { "prefix": "mod",     "body": [ "module.exports = ${1};"]},
    "js-require":     { "prefix": "req",     "body": [ "const ${1} = require('${2:module_name}');"]},
    "js-const":       { "prefix": "const",   "body": [ "const ${1} = ${2:${TM_SELECTED_TEXT}};"]},
    "js-let":         { "prefix": "let",     "body": [ "let ${1} = ${2:${TM_SELECTED_TEXT}};"]},
    "js-class":       { "prefix": "class",   "body": [ "class ${1:Class} {\n\t${2:${TM_SELECTED_TEXT}}\n}"]},
    "js-ctor":        { "prefix": "ctor",    "body": [ "constructor(${1:props}) {\n\t${2:super(props)}\n\t${3:${TM_SELECTED_TEXT}}\n}"]},
    "js-fun":         { "prefix": "fun",     "body": [ "function ${1:fun}(${2:args}) {\n\t${0:${TM_SELECTED_TEXT}}\n}"]},
    "js-afun":        { "prefix": "afun",    "body": [ "(${1:args}) => {\n\t${2:${TM_SELECTED_TEXT}}\n}"]},
    "js-cfun":        { "prefix": "cfun",    "body": [ "const ${1:Fun} = (${2:args}) => {\n\t${3:${TM_SELECTED_TEXT}}\n}"]},
    "js-method":      { "prefix": "method",  "body": [ "${1:fun}(${2:args}) {\n\t${3:${TM_SELECTED_TEXT}}\n}"]},
    "js-if":          { "prefix": "if",      "body": [ "if (${1:/* condition */}) {\n\t${2:${TM_SELECTED_TEXT}}\n}"]},
    "js-ife":         { "prefix": "ife",     "body": [ "if (${1:/* condition */}) {\n\t${2:${TM_SELECTED_TEXT}}\n} else {\n\t${3}\n}"]},
    "js-else":        { "prefix": "else",    "body": [ "else {\n\t${1:${TM_SELECTED_TEXT}}\n}"]},
    "js-elif":        { "prefix": "elif",    "body": [ "else if (${1:/* condition */}) {\n\t${2:${TM_SELECTED_TEXT}}\n}"]},
    "js-switch":      { "prefix": "switch",  "body": [ "switch (${1:/* expression */}) {\n\tcase '${2:case}':\n\t\t${3}\n\t\tbreak;\n\tdefault:\n\t\t${4:/* default */}:\n}$0"]},
    "js-case":        { "prefix": "case",    "body": [ "case '${1:case}':\n\t${0:${TM_SELECTED_TEXT}}\n\tbreak;"]},
    "js-try":         { "prefix": "try",     "body": [ "try {\n\t${1:${TM_SELECTED_TEXT}}\n} catch (${2:err}) {\n\t${3:/* handle error */}\n}"]},
    "js-tryf":        { "prefix": "tryf",    "body": [ "try {\n\t${1:${TM_SELECTED_TEXT}}\n} catch (${2:err}) {\n\t${3:/* handle error */}\n} finally {\n\t${4:/* always executed */}\n}"]},
    "js-throw":       { "prefix": "throw",   "body": [ "throw ${1:new Error('${2:error message}')}"]},
    "js-ret":         { "prefix": "ret",     "body": [ "return ${1:result};"]},
    "js-for":         { "prefix": "for",     "body": [ "for (${1:...}) {\n\t${2:${TM_SELECTED_TEXT}}\n}"]},
    "js-for...count": { "prefix": "forc",    "body": [ "for (let ${1:i} = 0; $1 < $2; $1++) {\n\t${3:${TM_SELECTED_TEXT}}\n}"]},
    "js-for...in":    { "prefix": "fori",    "body": [ "for (let ${1:i} in ${2:object}) {\n\t${3:${TM_SELECTED_TEXT}}\n}"]},
    "js-for...of":    { "prefix": "forv",    "body": [ "for (let ${1:prop} of ${2:object}) {\n\t${3:${TM_SELECTED_TEXT}}\n}"]},
    "js-while":       { "prefix": "while",   "body": [ "while (${1:/* condition */}) {\n\t${1:${TM_SELECTED_TEXT}}\n}"]},
    "js-dowhile":     { "prefix": "dowhile", "body": [ "do {\n\t${2:${TM_SELECTED_TEXT}}\n} while (${1:/* condition */});"]},
    "js-symbol":      { "prefix": "symbol",  "body": [ "Symbol('${1}');"]},
    "js-doc":         { "prefix": "doc",     "body": [ "/**\n * ${1:Description}\n * @param  {${2:type}} ${3:arg} ${4:description}\n * @return {${5:type}}\t  ${6:description}\n */"]},
    "js-bind":        { "prefix": "bnd",     "body": [ "this.${1:methodName} = this.${1:methodName}.bind(this)$0"]},
    "js-get":         { "prefix": "get",     "body": [ "get ${1:propertyName}() {\n\treturn this.${3}\n}\n"]},
    "js-set":         { "prefix": "set",     "body": [ "set ${1:propertyName}(${2:value}) {\n\t${3}\n}\n"]},
    "js-for...each":  { "prefix": "fore",    "body": [ "forEach(${1:(item)} => {\n\t${2}\n})\n"]},
    "js-promise":     { "prefix": "promise", "body": [ "new Promise((resolve, reject) => {\n\t${1}\n})\n"]}
}
