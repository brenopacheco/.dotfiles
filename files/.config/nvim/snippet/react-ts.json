{
    "react-ts-use-callback":         { "prefix": "use-callback",         "body": [ "useCallback(", "\t() => {", "\t\t${1:callback}", "\t},", "\t[${2:input}],", ")" ] },
    "react-ts-use-context":          { "prefix": "use-context",          "body": [ "const ${1:context} = useContext(${2:contextValue})"] },
    "react-ts-use-debugValue":       { "prefix": "use-debugValue",       "body": [ "useDebugValue(${1:value})"] },
    "react-ts-use-effect":           { "prefix": "use-effect",           "body": [ "useEffect(() => {\n\t${1:// ...}\n\t// return () => {}\n}, [])"                ]},
    "react-ts-use-memo":             { "prefix": "use-memo",             "body": [ "useMemo(() => ${1:function}, ${2:input})"] },
    "react-ts-use-reducer":          { "prefix": "use-reduce",           "body": [ "const [state, dispatch] = React.useReducer(reducer, initState)"                ]},
    "react-ts-use-ref":              { "prefix": "use-ref",              "body": [ "const ${1:ref} = React.useRef<${2:HTMLDivElement}>(null)"                      ]},
    "react-ts-use-state":            { "prefix": "use-state",            "body": [ "const [${1:state}, ${2:setState}] = React.useState<${3:boolean}>(${4:true})"   ]}
}
