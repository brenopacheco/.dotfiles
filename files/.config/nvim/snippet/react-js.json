{
    "react-js-use-callback":         { "prefix": "use-callback",         "body": [ "const callback = useCallback(", "\t() => {", "\t\t${1:callback}", "\t},", "\t[${2:input}],", ");" ] },
    "react-js-use-context":          { "prefix": "use-context",          "body": [ "const ${1:context} = useContext(${2:contextValue});"] },
    "react-js-use-debugValue":       { "prefix": "use-debugValue",       "body": [ "useDebugValue(${1:value});"] },
    "react-js-use-effect":           { "prefix": "use-effect",           "body": [ "useEffect(() => {", "\t${1:effect}", "\treturn () => {", "\t\t${2:cleanup}", "\t}", "}, [${3:input}]);" ] },
    "react-js-use-memo":             { "prefix": "use-memo",             "body": [ "useMemo(() => ${1:function}, ${2:input});"] },
    "react-js-use-reducer":          { "prefix": "use-reducer",          "body": [ "const [state, dispatch] = useReducer(${1:reducer}, ${2:initialState}, ${3:init});" ] },
    "react-js-use-ref":              { "prefix": "use-ref",              "body": [ "const ${1:ref} = useRef(${2:initialValue});"] },
    "react-js-use-state":            { "prefix": "use-state",            "body": [ "const [${1:state}, ${2:setState}] = React.useState(${3:true});"   ]}
}
