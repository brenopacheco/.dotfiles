* Vim plugins

** Runtimepath

When Vim looks for files in a specific directory, like syntax/, it doesn't just look in a single place. Much like PATH on Linux/Unix/BSD systems, Vim has the runtimepath setting which tells it where to find files to load.

Vim Plug solves this issue.

** Vim Plug


** Plugin layout

https://learnvimscriptthehardway.stevelosh.com/chapters/42.html

- colors/   :: colorscheme vim files. 
files contain the necessary commands to generate the color scheme.
contents are loaded manually or by the command :color <mycolor>

- plugin/   :: commands that run /every/ time vim starts.

- ftdetect/ :: filetype detection. run /every/ time vim  starts. 
The files in this directory should set up autocommands that 
detect and set the filetype of files, and nothing else.

- ftplugin/ :: when vim matches a filetype it looks here for files. 
i.e.: if ft=derp, vim will try to load derp.vim and all files in derp/. 
/every/ time a buffer's filetype is set, these files will load. 
therefore these should be only buffer-local settings.

- indent/   :: files here are also loaded by name based on filetype.
behavior is exactly like ftplugin, but it is convention to place 
here buffer-local settings related to indentation.

- compiler/ :: works exacly like indent and ftplugin. sets options
for compilation based on filetype. i.e: setting Maven as compiler 
for java files.

- syntax/   :: syntax files for filetypes are defined here. 
when does it run? is it sourced on every buffer of a filetype, 
like with ftplugin, indent and compiler?

- after/    :: these are run /every/ time vim starts, but only AFTER
vim has loaded all it's content. this allows the plugin to override
default vim settings loaded up on startup.

- autoload/ :: these files are loaded on startup too, but with a catch:
functions, commands and mappings defined with an empty implementation,
which boosts up startup. only when these are invoked is that the script
is fully sourced, and the references are attached to the implementation.

- doc/      :: where we place our documentation as /help/ files.
