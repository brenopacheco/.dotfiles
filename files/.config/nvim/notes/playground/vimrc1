nnoremap # yy:@"<CR>

set noshowmode
set updatetime=300
set shortmess+=c
set completeopt=menu,menuone,noselect
set pumwidth=10
set pumheight=8

au! CursorHoldI * if getline('.')[col('.')-2] =~ '\S'
             \ && !pumvisible() | silent call feedkeys("\<c-x>\<c-u>") | endif
au! CompleteDone * silent call feedkeys("\<space>\<backspace>")
 
inoremap <expr> <tab>
  \ pumvisible() ?
  \   complete_info(['selected']).selected != -1 ? 
  \     "\<c-y>"
  \     :
  \     "\<c-n>\<c-y>"
  \   :
  \   "\<tab>"

fun! FileCompleteFunc(findstart, base) abort
    if a:findstart
        let keywordregex = '\k\|\.\|\/'
        let regex = '\(' . keywordregex . '\)\+\%' . col(".") . 'c'
        return match(getline("."), regex)
    endif
    return getcompletion(a:base, "file")
endfun

set completefunc=FileCompleteFunc

" fun! s:i_word() abort
"     let idx_start = match(getline("."), '\(\k\+\)\%' . col(".") . 'c')
"     let idx_end = col(".") - 2
"     return getline(".")[idx_start:idx_end]
" endfun
 
 
" inoremap <F5> <C-R>=FilesComplete()<CR>
" 
" func! FilesComplete() 
"   let word = s:i_word()
"   let files = getcompletion(word, "file")
"   let file_items = map(files, { _,file -> { "kind": "file", "word": file } })
"   call complete(col(".") - len(word), file_items)
"   return ''
" endfunc

" another example
" function TSOmniComplete(findstart, base)
"   if a:findstart
"     let line = getline('.')
"     let start = col('.') - 1

"     while start > 0 && line[start - 1] =~ '\k'
"       let start -= 1
"     endwhile

"     return start
"   else
"     return TSComplete(a:base)
"   endif
" endfun
