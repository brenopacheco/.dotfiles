#!/bin/bash

LOG_COUNT=16
TERM_WIDTH=$(tput cols)

GRAPH_WIDTH=$(git log --remotes --branches --oneline -n $LOG_COUNT --graph | sed 's/\([a-z0-9]\{7\}\)\(.*\)/\1/' | awk '{print length()}' | sort -g | tail -n 1)

COMMITER_MAX_WIDTH=$(git log --remotes --branches -n $LOG_COUNT --pretty='%cn' | sort | uniq | awk '{print length()}' | sort -g | tail -n 1)
COMMITTER_WIDTH=$(echo -e "$COMMITER_MAX_WIDTH\n20" | sort -g | head -n 1)
DATE_WIDTH=12
MESSAGE_WIDTH=$(($TERM_WIDTH - $COMMITTER_WIDTH - $DATE_WIDTH - $GRAPH_WIDTH - 4 - 1))
LOG_FORMAT="%C(auto)%>|($GRAPH_WIDTH)%h %<($MESSAGE_WIDTH,trunc)%s %<($COMMITTER_WIDTH,trunc)%Cblue%cn %Creset %Cgreen%>($DATE_WIDTH,trunc)%ar%C(auto)%+d"
#COMMITTER_WIDTH=30
#%w($TERM_WIDTH)
#%>|($GRAPH_WIDTH)%+d

print_graph() {
    git log \
        --graph \
        --remotes \
        --branches \
        --date=short \
        --color=always \
        --max-count=$LOG_COUNT \
        --pretty=format:"$LOG_FORMAT" 
# | column -t -s '}'
}

print_status() {
    git -c color.status=always status -s --branch
}

print_stash() {
    git stash list 
}

print_branches() {
    git branch -vva
}

print_separator() {
    REPEAT=$(($TERM_WIDTH - ${#1} - 1))
    printf "$1 "
    eval "printf '=%.0s' {1..$REPEAT}"
}

print_git() {
    print_separator "LOG"
    echo -e ""
    print_graph
    echo -e ""
    print_separator "STATUS"
    echo -e ""
    print_status
    echo -e ""
    print_separator "BRANCHES"
    echo -e ""
    print_branches
    print_separator "STASH"
    echo -e ""
    print_stash
}

export -f print_separator
export -f print_graph
export -f print_stash
export -f print_status
export -f print_git

ROOT=$(git rev-parse --show-toplevel)
while true; do
    clear
    print_git
    inotifywait --event close_write --monitor --recursive $ROOT > /dev/null 2>&1
    sleep 1
done
