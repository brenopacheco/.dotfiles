#!/usr/bin/env bash

LANG=$1

function help() {
	cat <<EOF
Usage: sketch [ml|d|go|js|ts|bun|sh|c|lua|rust|zig|perl] [NAME]

Creates a sketch project for a given language.
The directory is created in $HOME/sketch with a random name.
If NAME is provided, the directory name is prefixed with the argument.

EOF
}

if test "$#" -lt 1; then
	help
	exit 0
fi

LANG=$1
NAME=$2

if [[ ! "$LANG" =~ ^(ml|d|go|js|ts|bun|sh|c|lua|rust|zig|perl)$ ]]; then
	help
	echo "Invalid LANG: use ml, d, go, js, ts, bun, c, lua, rust, zig or perl" >&2
	exit 1
fi

mkdir -p ~/sketch

TMPNAME="${LANG}_$(tr -cd 'a-f0-9' < /dev/urandom | head -c 10)"

if [[ -n "$NAME" ]]; then
	TMPNAME="$NAME-$TMPNAME"
fi

DIR="$HOME/sketch/$TMPNAME"

cat <<EOF
Setting up sketch project with $LANG in $DIR
EOF

mkdir -p "$DIR"
cd "$DIR" || exit 1
git init


D_TEMPLATE=$(
	cat <<'END_HEREDOC'
import io = std.stdio;
void main()
{
    io.writeln("Hello, World!");
}
END_HEREDOC
)

JS_TSCONFIG=$(
	cat <<'END_HEREDOC'
{
  "compilerOptions": {
    "allowJs": true,
    "checkJs": true,
    "strict": true
  }
}
END_HEREDOC
)

IGNORE_DIR=$HOME/.ignores

case $LANG in
"go")
	go mod init pkg
	touch main.go
	echo -e "package main\n\nfunc main() {\n\n\n}" >main.go
	echo -e 'all:\n\tgo run main.go' >Makefile
	cp "${IGNORE_DIR}/Go.gitignore" .gitignore
	;;
"c")
	echo -e "#include <stdio.h>\n\nint main() {\n\n  return 0;\n}" >main.c
	echo -e 'all:\n\tgcc main.c -o main\n\t./main' >Makefile
	;;
"js")
	npm init -y
	touch main.js
	echo -e 'all:\n\tnode main.js' >Makefile
	echo "$JS_TSCONFIG" >tsconfig.json
	npm i -D typescript @types/node
	cp "${IGNORE_DIR}/Node.gitignore" .gitignore
	;;
"ts")
	npm init -y
	touch main.ts
	echo -e 'all:\n\tts-node main.ts' >Makefile
	tsc --init
	cp "${IGNORE_DIR}/Node.gitignore" .gitignore
	;;
"bun")
	bun init -y
	echo -e 'all:\n\tbun run start' >Makefile
	jq '.scripts = { "start": "bun run index.ts" }' package.json |
		sponge package.json
	cp "${IGNORE_DIR}/Node.gitignore" .gitignore
	;;
"sh")
	FILE="main.sh"
	touch $FILE
	chmod +x $FILE
	echo -e "#!/usr/bin/env bash\n" >$FILE
	echo -e "all:\n\t./$FILE" >Makefile
	;;
"lua")
	touch main.lua
	cp "${IGNORE_DIR}/Lua.gitignore" .gitignore
	;;
"rust")
	touch main.rs
	cargo init --name ${2:-sketch}
	cp "${IGNORE_DIR}/Rust.gitignore" .gitignore
	;;
"zig")
	echo -e 'all:\n\tzig run main.zig\n\nbuild:\n\tzig build-exe main.zig' >Makefile
	echo -e 'const std = @import("std");\n\npub fn main() !void {\n\tconst stdout = std.io.getStdOut().writer();\n\ttry stdout.print("Hello, {s}!\\n", .{"world"});\n}' >main.zig
	cp "${IGNORE_DIR}/zig.gitignore" .gitignore
	;;
"d")
	echo -e "$D_TEMPLATE" >main.d
	chmod +x ./main.d
	echo -e 'all:\n\trdmd ./main.d' >Makefile
	;;
"ml")
	echo -e "#!/usr/bin/env ocaml\n\nprint_endline \"Hello, world!\"" >main.ml
	chmod +x ./main.ml
	echo -e 'all:\n\t./main.ml' >Makefile
	;;
"perl")
	echo -e "#!/usr/bin/env perl\n\nuse diagnostics;\nuse feature 'say';\n\n" >main.perl
	chmod +x ./main.perl
	echo -e 'all:\n\t./main.perl' >Makefile
	;;
esac

echo "Directory: $DIR"

BASHRC=$(mktemp)

cat "$HOME/.bashrc" >"$BASHRC"

echo "nvim ." >>"$BASHRC"

# shellcheck disable=SC2028
echo "PS1='\[\033[38;5;20m\]\[\033[48;5;11m\]sketch\[$(tput sgr0)\]\[\e[34m\] \w\[$(tput sgr0)\]\$ '" >>"$BASHRC"

tmux new -s "sketch-$TMPNAME" "bash --rcfile $BASHRC -i"

exit 0
