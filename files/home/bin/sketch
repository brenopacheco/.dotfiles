#!/usr/bin/env bash

LANG=$1

function help() {
	cat <<EOF
Usage: sketch [go|js|ts|bun|sh|c|lua|rust] [NAME]

Creates a sketch project for a given language.
The directory is created in $HOME/sketch with a random name.
If NAME is provided, the directory name is prefixed with the argument.

EOF
}

if test "$#" -lt 1; then
	help
	exit 0
fi

LANG=$1
NAME=$2

if [[ ! "$LANG" =~ ^(go|js|ts|bun|sh|c|lua|rust)$ ]]; then
	help
	echo "Invalid LANG: use go, js, ts, bun, c, lua or rust" >&2
	exit 1
fi

mkdir -p ~/sketch

TMPNAME="$LANG_$(cat /dev/urandom | tr -cd 'a-f0-9' | head -c 10)"

if [[ ! -z "$NAME" ]]; then
	TMPNAME="$NAME-$TMPNAME"
fi

DIR="$HOME/sketch/$TMPNAME"

cat <<EOF
Setting up sketch project with $LANG in $DIR
EOF

mkdir -p $DIR
cd $DIR
git init

echo "$GO_TEMPLATE"

CMAKE_MAKEFILE=$(
	cat <<'END_HEREDOC'
.ONESHELL:
.PHONY: help

BUILD_DIR = cmake
BIN = main

all: $(BIN)
	$(BUILD_DIR)/$(BIN)

$(BIN): $(BUILD_DIR)
	cmake --build $(BUILD_DIR)

$(BUILD_DIR):
	cmake . -B $(BUILD_DIR) -G Ninja

build: $(BIN)

clean:
	rm -rf $(BUILD_DIR)

help:
	@echo "Available targets:"
	@echo "  all      : Build using cmake and run"
	@echo "  build  : Builds using cmake"
	@echo "  clean    : Remove the build directory"
	@echo "  help     : Show this help message"
END_HEREDOC
)

CMAKE_LISTS=$(
	cat <<'END_HEREDOC'
cmake_minimum_required(VERSION 3.5 FATAL_ERROR)

project(example LANGUAGES C)

add_executable(main main.c)
END_HEREDOC
)

IGNORE_DIR=$HOME/.ignores

case $LANG in
"go")
	go mod init pkg
	touch main.go
	echo -e "package main\n\nfunc main() {\n\n\n}" >main.go
	echo -e 'all:\n\tgo run main.go' >Makefile
	cp $IGNORE_DIR/Go.gitignore .gitignore
	;;
"c")
	echo -e "#include <stdio.h>\n\nint main() {\n\n  return 0;\n}" >main.c
	echo -e 'all:\n\tgcc main.c -o main\n\t./main' >Makefile
	;;
"js")
	npm init -y
	touch main.js
	echo -e 'all:\n\tnode main.js' >Makefile
	tsc --init
	cp $IGNORE_DIR/Node.gitignore .gitignore
	;;
"ts")
	npm init -y
	touch main.ts
	echo -e 'all:\n\tts-node main.ts' >Makefile
	tsc --init
	cp $IGNORE_DIR/Node.gitignore .gitignore
	;;
"bun")
	bun init -y
	echo -e 'all:\n\tbun run start' >Makefile
	jq '.scripts = { "start": "bun run index.ts" }' package.json |
		sponge package.json
	cp $IGNORE_DIR/Node.gitignore .gitignore
	;;
"sh")
	FILE="main.sh"
	touch $FILE
	chmod +x $FILE
	echo -e "#!/usr/bin/env bash\n" >$FILE
	echo -e "all:\n\t./$FILE" >Makefile
	;;
"lua")
	touch main.lua
	cp $IGNORE_DIR/Lua.gitignore .gitignore
	;;
"rust")
	touch main.rs
	cargo init --name ${2:-sketch}
	cp $IGNORE_DIR/Rust.gitignore .gitignore
	;;
esac

echo "Directory: $DIR"

BASHRC=$(mktemp)

cat $HOME/.bashrc >$BASHRC

echo "PS1='\[\033[38;5;20m\]\[\033[48;5;11m\]sketch\[$(tput sgr0)\]\[\e[34m\] \w\[$(tput sgr0)\]\$ '" >>$BASHRC

tmux new -s $TMPNAME "bash --rcfile $BASHRC -i"

exit 0
